---
source: src/compile.rs
description: "func main() {\n    let expected = [1, \"ðŸˆ”\", \"tres\", nil];\n    let actual = [];\n\n    actual.append(1);\n    actual.append(\"ðŸˆ”\");\n    actual.append(expected);\n    actual.append(nil);\n\n    println(expected);\n    println(actual);\n    println(expected == actual);\n\n    actual[2] = \"tres\";\n    println(expected);\n    println(actual);\n    println(expected == actual);\n}\n\nmain();\n"
input_file: test_programs/lists.blis
---
DisassembledChunk(
  constants: [
    Func(DisassembledFunc(
      name: "main",
      arity: 0,
      upvalues: 0,
      chunk: DisassembledChunk(
        constants: [
          Rational(((1, [
            1,
          ]), (1, [
            1,
          ]))),
          String("ðŸˆ”"),
          String("tres"),
          String("append"),
          Rational(((1, [
            2,
          ]), (1, [
            1,
          ]))),
        ],
        globals: [
          "println",
        ],
        code: [
          Constant(0),
          Constant(1),
          Constant(2),
          Nil,
          List(4),
          List(0),
          GetLocal(2),
          GetField(3),
          Constant(0),
          Call(1),
          Pop,
          GetLocal(2),
          GetField(3),
          Constant(1),
          Call(1),
          Pop,
          GetLocal(2),
          GetField(3),
          GetLocal(1),
          Call(1),
          Pop,
          GetLocal(2),
          GetField(3),
          Nil,
          Call(1),
          Pop,
          GetGlobal(0),
          GetLocal(1),
          Call(1),
          Pop,
          GetGlobal(0),
          GetLocal(2),
          Call(1),
          Pop,
          GetGlobal(0),
          GetLocal(1),
          GetLocal(2),
          Eq,
          Call(1),
          Pop,
          GetLocal(2),
          Constant(4),
          Constant(2),
          SetIndex,
          GetGlobal(0),
          GetLocal(1),
          Call(1),
          Pop,
          GetGlobal(0),
          GetLocal(2),
          Call(1),
          Pop,
          GetGlobal(0),
          GetLocal(1),
          GetLocal(2),
          Eq,
          Call(1),
          Pop,
          Nil,
          PopUnderN(2),
          Return,
        ],
      ),
    )),
  ],
  globals: [
    "main",
  ],
  code: [
    Closure(0, 0, []),
    DefineGlobal(0),
    GetGlobal(0),
    Call(0),
    Pop,
    Nil,
    Return,
  ],
)
