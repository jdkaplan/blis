---
source: src/compile.rs
description: "func main() {\n    func adder(a) {\n        func add(b) {\n            a + b\n        }\n\n        add\n    }\n\n    let add_1 = adder(1);\n    println(add_1(2));\n    println(add_1(3));\n}\n\nmain();\n"
input_file: test_programs/closures_math.blis
---
DisassembledChunk(
  constants: [
    Func(DisassembledFunc(
      name: "main",
      arity: 0,
      upvalues: 0,
      chunk: DisassembledChunk(
        constants: [
          Func(DisassembledFunc(
            name: "adder",
            arity: 1,
            upvalues: 0,
            chunk: DisassembledChunk(
              constants: [
                Func(DisassembledFunc(
                  name: "add",
                  arity: 1,
                  upvalues: 1,
                  chunk: DisassembledChunk(
                    constants: [],
                    globals: [],
                    code: [
                      GetUpvalue(0),
                      GetLocal(1),
                      Add,
                      PopUnderN(0),
                      Return,
                    ],
                  ),
                )),
              ],
              globals: [],
              code: [
                Closure(0, 1, [
                  Local(1),
                ]),
                GetLocal(2),
                PopUnderN(1),
                Return,
              ],
            ),
          )),
          Rational(((1, [
            1,
          ]), (1, [
            1,
          ]))),
          Rational(((1, [
            2,
          ]), (1, [
            1,
          ]))),
          Rational(((1, [
            3,
          ]), (1, [
            1,
          ]))),
        ],
        globals: [
          "println",
        ],
        code: [
          Closure(0, 0, []),
          GetLocal(1),
          Constant(1),
          Call(1),
          GetGlobal(0),
          GetLocal(2),
          Constant(2),
          Call(1),
          Call(1),
          Pop,
          GetGlobal(0),
          GetLocal(2),
          Constant(3),
          Call(1),
          Call(1),
          Pop,
          Nil,
          PopUnderN(2),
          Return,
        ],
      ),
    )),
  ],
  globals: [
    "main",
  ],
  code: [
    Closure(0, 0, []),
    DefineGlobal(0),
    GetGlobal(0),
    Call(0),
    Pop,
    Nil,
    Return,
  ],
)
