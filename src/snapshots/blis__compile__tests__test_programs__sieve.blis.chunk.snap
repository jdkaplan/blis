---
source: src/compile.rs
description: "// Sieve of Eratosthenes\n\nlet n = 100;\nlet sieve = [];\n\n// initialize the list\nlet i = 0;\nloop {\n    if i == n {\n        break;\n    }\n\n    sieve.append(i);\n    i = i + 1;\n}\n\n\n// cross off composites by marking them false\nfunc crossout(prime) {\n    let next = 0;\n    let i = 2;\n    loop {\n        next = prime * i;\n        if next >= n {\n            break;\n        }\n\n        sieve[next] = false;\n        i = i + 1;    \n    }\n}\n\n// finds the next prime in the sieve if there is one\nfunc find(prime) {\n    let next = prime + 1;\n    loop {\n        if next == n {\n            break;\n        }\n\n        if sieve[next] {\n            break;\n        }\n\n        next = next + 1;\n    }\n    next\n}\n\nsieve[0] = false;\nsieve[1] = false;\nlet prime = 2;\nlet next = 0;\nloop {\n    crossout(prime);\n    next = find(prime);\n    if next == n {\n        break;\n    }\n\n    prime = next;\n}\n\n\n// print the results\ni = 0;\nloop {\n    if i == n {\n        break;\n    }\n\n    if sieve[i] {\n        println(sieve[i]);\n    }\n    i = i + 1;\n}\n"
input_file: test_programs/sieve.blis
---
DisassembledChunk(
  constants: [
    Rational(((1, [
      100,
    ]), (1, [
      1,
    ]))),
    Rational(((0, []), (1, [
      1,
    ]))),
    String("append"),
    Rational(((1, [
      1,
    ]), (1, [
      1,
    ]))),
    Func(DisassembledFunc(
      name: "crossout",
      arity: 1,
      upvalues: 0,
      chunk: DisassembledChunk(
        constants: [
          Rational(((0, []), (1, [
            1,
          ]))),
          Rational(((1, [
            2,
          ]), (1, [
            1,
          ]))),
          Rational(((1, [
            1,
          ]), (1, [
            1,
          ]))),
        ],
        globals: [
          "n",
          "sieve",
        ],
        code: [
          Constant(0),
          Constant(1),
          GetLocal(1),
          GetLocal(3),
          Mul,
          SetLocal(2),
          GetLocal(2),
          GetGlobal(0),
          Ge,
          JumpFalsePop(11),
          PopN(0),
          Jump(27),
          Nil,
          PopUnderN(0),
          Nil,
          Pop,
          GetGlobal(1),
          GetLocal(2),
          False,
          SetIndex,
          GetLocal(3),
          Constant(2),
          Add,
          SetLocal(3),
          Nil,
          PopUnderN(0),
          Loop(41),
          Nil,
          PopUnderN(2),
          Return,
        ],
      ),
    )),
    Func(DisassembledFunc(
      name: "find",
      arity: 1,
      upvalues: 0,
      chunk: DisassembledChunk(
        constants: [
          Rational(((1, [
            1,
          ]), (1, [
            1,
          ]))),
        ],
        globals: [
          "n",
          "sieve",
        ],
        code: [
          GetLocal(1),
          Constant(0),
          Add,
          GetLocal(2),
          GetGlobal(0),
          Eq,
          JumpFalsePop(11),
          PopN(0),
          Jump(39),
          Nil,
          PopUnderN(0),
          Nil,
          Pop,
          GetGlobal(1),
          GetLocal(2),
          GetIndex,
          JumpFalsePop(11),
          PopN(0),
          Jump(21),
          Nil,
          PopUnderN(0),
          Nil,
          Pop,
          GetLocal(2),
          Constant(0),
          Add,
          SetLocal(2),
          Nil,
          PopUnderN(0),
          Loop(46),
          GetLocal(2),
          PopUnderN(1),
          Return,
        ],
      ),
    )),
    Rational(((1, [
      2,
    ]), (1, [
      1,
    ]))),
  ],
  globals: [
    "n",
    "sieve",
    "i",
    "crossout",
    "find",
    "prime",
    "next",
    "println",
  ],
  code: [
    Constant(0),
    DefineGlobal(0),
    List(0),
    DefineGlobal(1),
    Constant(1),
    DefineGlobal(2),
    GetGlobal(2),
    GetGlobal(0),
    Eq,
    JumpFalsePop(11),
    PopN(0),
    Jump(30),
    Nil,
    PopUnderN(0),
    Nil,
    Pop,
    GetGlobal(1),
    GetField(2),
    GetGlobal(2),
    Call(1),
    Pop,
    GetGlobal(2),
    Constant(3),
    Add,
    SetGlobal(2),
    Nil,
    PopUnderN(0),
    Loop(37),
    Closure(4, 0, []),
    DefineGlobal(3),
    Closure(5, 0, []),
    DefineGlobal(4),
    GetGlobal(1),
    Constant(1),
    False,
    SetIndex,
    GetGlobal(1),
    Constant(3),
    False,
    SetIndex,
    Constant(6),
    DefineGlobal(5),
    Constant(1),
    DefineGlobal(6),
    GetGlobal(3),
    GetGlobal(5),
    Call(1),
    Pop,
    GetGlobal(4),
    GetGlobal(5),
    Call(1),
    SetGlobal(6),
    GetGlobal(6),
    GetGlobal(0),
    Eq,
    JumpFalsePop(11),
    PopN(0),
    Jump(18),
    Nil,
    PopUnderN(0),
    Nil,
    Pop,
    GetGlobal(6),
    SetGlobal(5),
    Nil,
    PopUnderN(0),
    Loop(40),
    Constant(1),
    SetGlobal(2),
    GetGlobal(2),
    GetGlobal(0),
    Eq,
    JumpFalsePop(11),
    PopN(0),
    Jump(44),
    Nil,
    PopUnderN(0),
    Nil,
    Pop,
    GetGlobal(1),
    GetGlobal(2),
    GetIndex,
    JumpFalsePop(16),
    GetGlobal(7),
    GetGlobal(1),
    GetGlobal(2),
    GetIndex,
    Call(1),
    Pop,
    Nil,
    PopUnderN(0),
    Nil,
    Pop,
    GetGlobal(2),
    Constant(3),
    Add,
    SetGlobal(2),
    Nil,
    PopUnderN(0),
    Loop(51),
    Nil,
    Return,
  ],
)
