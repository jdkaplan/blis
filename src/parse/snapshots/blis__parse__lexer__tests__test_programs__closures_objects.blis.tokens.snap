---
source: src/parse/lexer.rs
description: "func main() {\n    let one = new_thing(\"uno\");\n    let two = new_thing(\"dos\");\n\n    println(one);\n    println(one.id, one.name);\n\n    println(two);\n    println(two.id, two.name);\n\n    one.two = two;\n    two.one = one;\n\n    println(one.two);\n    println(two.one);\n}\n\nlet counter = 0;\n\nfunc new_thing(name) {\n    counter = counter + 1;\n\n    object {\n        id = counter,\n        name = name,\n    }\n}\n\nmain();\n"
input_file: test_programs/closures_objects.blis
---
[
  Lexeme(
    token: Func,
    text: "func",
    line: 1,
  ),
  Lexeme(
    token: Identifier,
    text: "main",
    line: 1,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 1,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 1,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 1,
  ),
  Lexeme(
    token: Let,
    text: "let",
    line: 2,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 2,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 2,
  ),
  Lexeme(
    token: Identifier,
    text: "new_thing",
    line: 2,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 2,
  ),
  Lexeme(
    token: String,
    text: "\"uno\"",
    line: 2,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 2,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 2,
  ),
  Lexeme(
    token: Let,
    text: "let",
    line: 3,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 3,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 3,
  ),
  Lexeme(
    token: Identifier,
    text: "new_thing",
    line: 3,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 3,
  ),
  Lexeme(
    token: String,
    text: "\"dos\"",
    line: 3,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 3,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 3,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 5,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 5,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 5,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 5,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 5,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 6,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 6,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 6,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 6,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 6,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 6,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 8,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 8,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 8,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 8,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 8,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 9,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 9,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 9,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 9,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 9,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 9,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 11,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 11,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 11,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 11,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 11,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 11,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 12,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 12,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 12,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 12,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 12,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 12,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 14,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 14,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 14,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 14,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 14,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 14,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 14,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 15,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 15,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 15,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 15,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 15,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 15,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 15,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 16,
  ),
  Lexeme(
    token: Let,
    text: "let",
    line: 18,
  ),
  Lexeme(
    token: Identifier,
    text: "counter",
    line: 18,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 18,
  ),
  Lexeme(
    token: Integer,
    text: "0",
    line: 18,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 18,
  ),
  Lexeme(
    token: Func,
    text: "func",
    line: 20,
  ),
  Lexeme(
    token: Identifier,
    text: "new_thing",
    line: 20,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 20,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 20,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 20,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 20,
  ),
  Lexeme(
    token: Identifier,
    text: "counter",
    line: 21,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 21,
  ),
  Lexeme(
    token: Identifier,
    text: "counter",
    line: 21,
  ),
  Lexeme(
    token: Plus,
    text: "+",
    line: 21,
  ),
  Lexeme(
    token: Integer,
    text: "1",
    line: 21,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 21,
  ),
  Lexeme(
    token: Identifier,
    text: "object",
    line: 23,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 23,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 24,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 24,
  ),
  Lexeme(
    token: Identifier,
    text: "counter",
    line: 24,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 24,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 25,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 25,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 25,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 25,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 26,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 27,
  ),
  Lexeme(
    token: Identifier,
    text: "main",
    line: 29,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 29,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 29,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 29,
  ),
  Lexeme(
    token: Eof,
    text: "",
    line: 30,
  ),
]
