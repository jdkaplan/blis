---
source: src/parse/parser.rs
description: "func main() {\n    func adder(a) {\n        func add(b) {\n            a + b\n        }\n\n        add\n    }\n\n    let add_1 = adder(1);\n    println(add_1(2));\n    println(add_1(3));\n}\n\nmain();\n"
input_file: test_programs/closures_math.blis
---
Program(
  decls: [
    Func(Func(
      ident: Identifier(
        name: "main",
      ),
      params: [],
      body: Block(
        decls: [
          Func(Func(
            ident: Identifier(
              name: "adder",
            ),
            params: [
              Identifier(
                name: "a",
              ),
            ],
            body: Block(
              decls: [
                Func(Func(
                  ident: Identifier(
                    name: "add",
                  ),
                  params: [
                    Identifier(
                      name: "b",
                    ),
                  ],
                  body: Block(
                    decls: [],
                    expr: Some(LogicOr(LogicOr(
                      first: LogicAnd(
                        first: Value(Value(Add(Value(Value(Value(Value(Atom(Identifier(Identifier(
                          name: "a",
                        ))))))), Value(Value(Value(Atom(Identifier(Identifier(
                          name: "b",
                        ))))))))),
                        rest: [],
                      ),
                      rest: [],
                    ))),
                  ),
                )),
              ],
              expr: Some(LogicOr(LogicOr(
                first: LogicAnd(
                  first: Value(Value(Value(Value(Value(Value(Atom(Identifier(Identifier(
                    name: "add",
                  ))))))))),
                  rest: [],
                ),
                rest: [],
              ))),
            ),
          )),
          Let(Let(
            ident: Identifier(
              name: "add_1",
            ),
            expr: LogicOr(LogicOr(
              first: LogicAnd(
                first: Value(Value(Value(Value(Value(Call(Value(Atom(Identifier(Identifier(
                  name: "adder",
                )))), [
                  LogicOr(LogicOr(
                    first: LogicAnd(
                      first: Value(Value(Value(Value(Value(Value(Atom(Literal(Integer((1, [
                        1,
                      ])))))))))),
                      rest: [],
                    ),
                    rest: [],
                  )),
                ])))))),
                rest: [],
              ),
              rest: [],
            )),
          )),
          Statement(Expression(LogicOr(LogicOr(
            first: LogicAnd(
              first: Value(Value(Value(Value(Value(Call(Value(Atom(Identifier(Identifier(
                name: "println",
              )))), [
                LogicOr(LogicOr(
                  first: LogicAnd(
                    first: Value(Value(Value(Value(Value(Call(Value(Atom(Identifier(Identifier(
                      name: "add_1",
                    )))), [
                      LogicOr(LogicOr(
                        first: LogicAnd(
                          first: Value(Value(Value(Value(Value(Value(Atom(Literal(Integer((1, [
                            2,
                          ])))))))))),
                          rest: [],
                        ),
                        rest: [],
                      )),
                    ])))))),
                    rest: [],
                  ),
                  rest: [],
                )),
              ])))))),
              rest: [],
            ),
            rest: [],
          )))),
          Statement(Expression(LogicOr(LogicOr(
            first: LogicAnd(
              first: Value(Value(Value(Value(Value(Call(Value(Atom(Identifier(Identifier(
                name: "println",
              )))), [
                LogicOr(LogicOr(
                  first: LogicAnd(
                    first: Value(Value(Value(Value(Value(Call(Value(Atom(Identifier(Identifier(
                      name: "add_1",
                    )))), [
                      LogicOr(LogicOr(
                        first: LogicAnd(
                          first: Value(Value(Value(Value(Value(Value(Atom(Literal(Integer((1, [
                            3,
                          ])))))))))),
                          rest: [],
                        ),
                        rest: [],
                      )),
                    ])))))),
                    rest: [],
                  ),
                  rest: [],
                )),
              ])))))),
              rest: [],
            ),
            rest: [],
          )))),
        ],
        expr: None,
      ),
    )),
    Statement(Expression(LogicOr(LogicOr(
      first: LogicAnd(
        first: Value(Value(Value(Value(Value(Call(Value(Atom(Identifier(Identifier(
          name: "main",
        )))), [])))))),
        rest: [],
      ),
      rest: [],
    )))),
  ],
)
