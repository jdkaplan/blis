---
source: src/parse/lexer.rs
description: "func main() {\n    let one = Counter.new(\"uno\");\n    let two = Counter.new(\"dos\");\n\n    println(one);\n    println(one.id, one.name);\n\n    println(two);\n    println(two.id, two.name);\n\n    // Eventually, gradual typing will let you prevent this. But for now...\n    one.two = two;\n    two.one = one;\n\n    println(one.two);\n    println(one[\"two\"]);\n    println(two.one);\n    println(two[\"one\"]);\n}\n\nlet id = 0;\n\ntype Counter with {\n    func new(name) {\n        id = id + 1;\n\n        Counter {\n            id = id,\n            name = name,\n            count = 0,\n        }\n    }\n\n    func self.incr() {\n        self.add(1);\n    }\n\n    func self.add(delta) {\n        self.count = self.count + delta;\n    }\n}\n\nmain();\n"
input_file: test_programs/objects.blis
---
[
  Lexeme(
    token: Func,
    text: "func",
    line: 1,
  ),
  Lexeme(
    token: Identifier,
    text: "main",
    line: 1,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 1,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 1,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 1,
  ),
  Lexeme(
    token: Let,
    text: "let",
    line: 2,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 2,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 2,
  ),
  Lexeme(
    token: Identifier,
    text: "Counter",
    line: 2,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 2,
  ),
  Lexeme(
    token: Identifier,
    text: "new",
    line: 2,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 2,
  ),
  Lexeme(
    token: String,
    text: "\"uno\"",
    line: 2,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 2,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 2,
  ),
  Lexeme(
    token: Let,
    text: "let",
    line: 3,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 3,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 3,
  ),
  Lexeme(
    token: Identifier,
    text: "Counter",
    line: 3,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 3,
  ),
  Lexeme(
    token: Identifier,
    text: "new",
    line: 3,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 3,
  ),
  Lexeme(
    token: String,
    text: "\"dos\"",
    line: 3,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 3,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 3,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 5,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 5,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 5,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 5,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 5,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 6,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 6,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 6,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 6,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 6,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 6,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 6,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 8,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 8,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 8,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 8,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 8,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 9,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 9,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 9,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 9,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 9,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 9,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 9,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 12,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 12,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 12,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 12,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 12,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 12,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 13,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 13,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 13,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 13,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 13,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 13,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 15,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 15,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 15,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 15,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 15,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 15,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 15,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 16,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 16,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 16,
  ),
  Lexeme(
    token: LeftBracket,
    text: "[",
    line: 16,
  ),
  Lexeme(
    token: String,
    text: "\"two\"",
    line: 16,
  ),
  Lexeme(
    token: RightBracket,
    text: "]",
    line: 16,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 16,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 16,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 17,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 17,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 17,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 17,
  ),
  Lexeme(
    token: Identifier,
    text: "one",
    line: 17,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 17,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 17,
  ),
  Lexeme(
    token: Identifier,
    text: "println",
    line: 18,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 18,
  ),
  Lexeme(
    token: Identifier,
    text: "two",
    line: 18,
  ),
  Lexeme(
    token: LeftBracket,
    text: "[",
    line: 18,
  ),
  Lexeme(
    token: String,
    text: "\"one\"",
    line: 18,
  ),
  Lexeme(
    token: RightBracket,
    text: "]",
    line: 18,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 18,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 18,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 19,
  ),
  Lexeme(
    token: Let,
    text: "let",
    line: 21,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 21,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 21,
  ),
  Lexeme(
    token: Integer,
    text: "0",
    line: 21,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 21,
  ),
  Lexeme(
    token: Type,
    text: "type",
    line: 23,
  ),
  Lexeme(
    token: Identifier,
    text: "Counter",
    line: 23,
  ),
  Lexeme(
    token: With,
    text: "with",
    line: 23,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 23,
  ),
  Lexeme(
    token: Func,
    text: "func",
    line: 24,
  ),
  Lexeme(
    token: Identifier,
    text: "new",
    line: 24,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 24,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 24,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 24,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 24,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 25,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 25,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 25,
  ),
  Lexeme(
    token: Plus,
    text: "+",
    line: 25,
  ),
  Lexeme(
    token: Integer,
    text: "1",
    line: 25,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 25,
  ),
  Lexeme(
    token: Identifier,
    text: "Counter",
    line: 27,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 27,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 28,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 28,
  ),
  Lexeme(
    token: Identifier,
    text: "id",
    line: 28,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 28,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 29,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 29,
  ),
  Lexeme(
    token: Identifier,
    text: "name",
    line: 29,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 29,
  ),
  Lexeme(
    token: Identifier,
    text: "count",
    line: 30,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 30,
  ),
  Lexeme(
    token: Integer,
    text: "0",
    line: 30,
  ),
  Lexeme(
    token: Comma,
    text: ",",
    line: 30,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 31,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 32,
  ),
  Lexeme(
    token: Func,
    text: "func",
    line: 34,
  ),
  Lexeme(
    token: Self_,
    text: "self",
    line: 34,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 34,
  ),
  Lexeme(
    token: Identifier,
    text: "incr",
    line: 34,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 34,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 34,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 34,
  ),
  Lexeme(
    token: Self_,
    text: "self",
    line: 35,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 35,
  ),
  Lexeme(
    token: Identifier,
    text: "add",
    line: 35,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 35,
  ),
  Lexeme(
    token: Integer,
    text: "1",
    line: 35,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 35,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 35,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 36,
  ),
  Lexeme(
    token: Func,
    text: "func",
    line: 38,
  ),
  Lexeme(
    token: Self_,
    text: "self",
    line: 38,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 38,
  ),
  Lexeme(
    token: Identifier,
    text: "add",
    line: 38,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 38,
  ),
  Lexeme(
    token: Identifier,
    text: "delta",
    line: 38,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 38,
  ),
  Lexeme(
    token: LeftBrace,
    text: "{",
    line: 38,
  ),
  Lexeme(
    token: Self_,
    text: "self",
    line: 39,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 39,
  ),
  Lexeme(
    token: Identifier,
    text: "count",
    line: 39,
  ),
  Lexeme(
    token: Equal,
    text: "=",
    line: 39,
  ),
  Lexeme(
    token: Self_,
    text: "self",
    line: 39,
  ),
  Lexeme(
    token: Dot,
    text: ".",
    line: 39,
  ),
  Lexeme(
    token: Identifier,
    text: "count",
    line: 39,
  ),
  Lexeme(
    token: Plus,
    text: "+",
    line: 39,
  ),
  Lexeme(
    token: Identifier,
    text: "delta",
    line: 39,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 39,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 40,
  ),
  Lexeme(
    token: RightBrace,
    text: "}",
    line: 41,
  ),
  Lexeme(
    token: Identifier,
    text: "main",
    line: 43,
  ),
  Lexeme(
    token: LeftParen,
    text: "(",
    line: 43,
  ),
  Lexeme(
    token: RightParen,
    text: ")",
    line: 43,
  ),
  Lexeme(
    token: Semicolon,
    text: ";",
    line: 43,
  ),
  Lexeme(
    token: Eof,
    text: "",
    line: 44,
  ),
]
